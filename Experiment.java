import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.CyclicBarrier;
import java.util.concurrent.FutureTask;

/**
 * A client can run a specified number of trials with a specified solver in a
 * maze generated by the specified generator and returns the average steps
 * needed to complete it
 * 
 * @author Hengrui Xing
 */
public class Experiment {

	/**
	 * runs a specified number of trials with a specified solver in a maze
	 * generated by the specified generator and returns the average steps needed
	 * to complete it
	 *
	 * @param solverName
	 *            the name of the solver used
	 * @param generatorName
	 *            the name of the maze generator used
	 * @param trials
	 *            the trials needed in the experiment
	 * @return the average steps needed to complete the mazes
	 */
	public static double averageStep(String solverName, String generatorName, int trials) {
		List<Integer> list = new ArrayList<>();
		FutureTask<Double> task = new FutureTask<>(new Callable<Double>() {
			@Override
			public Double call() throws Exception {
				int total = 0;
				for (int i : list) {
					total += i;
				}

				return (double) total / list.size();
			}
		});
		CyclicBarrier barrier = new CyclicBarrier(trials, task);
		for (int i = 0; i < trials; i++) {
			Thread thread = new Thread(new Runner(list, barrier, solverName, generatorName));
			thread.start();
		}
		try {
			return task.get();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return -1;
	}

}
